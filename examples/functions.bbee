const checkPrime = func (i) => {
    mut isPrime = 1,
    
    mut j = 1,
    for (j = j + 1, j < i - 1 && isPrime) {
        if ((i % j) == 0) {
            isPrime = 0
        }
    },

    isPrime
},

const nthPrime = func (n) => (
    mut count = 0,
    mut number = 2,
    for (count < n) {
        const check = checkPrime@number, 
        if (check) {
            count = count + 1
        },
        number = number + 1
    },

    number - 1
),

const nthFibonacci = func (n) => {
    mut a = 1,
    mut b = 1,

    for (n = n - 1, n > 0) {
        mut c = b,
        b = a + b,
        a = c
    },

    b
},

const nthTriangular = func (n) => {
    n * (n + 1) / 2
},

const nthPentagonal = func (n) => {
    n * (3 * n - 1) / 2
},

println@("Welcome to my program"),
println@("type exit to quit"),

mut user = 0,

for (user != "exit") {
    println@("choose a sequence: "),
    println@("1 - Primes"),
    println@("2 - Fibonacci"),
    println@("3 - Triangular"),
    println@("4 - Pentagonal"),
    
    print@("operation: "),
    user = prompt@(),
    print@("Pick a number N for the sequence: "),
    mut n = prompt@(),

    if(user == 1) {
        print@("output: "),
        println@(nthPrime@(n))
    },
    if(user == 2) {
        print@("output: "),
        println@(nthFibonacci@(n))
    },
    if(user == 3) {
        print@("output: "),
        println@(nthTriangular@(n))
    },
    if(user == 4) {
        print@("output: "),
        println@(nthPentagonal@(n))
    },
    if (user != 1 && user != 2 && user != 3 && user != 4) {
        println@("Wrong operation")
    },

    println@("")
}